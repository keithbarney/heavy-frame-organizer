// Generated by CoffeeScript 2.7.0
(function() {
  // Ensure the UI is properly loaded with adjustable size
  var loadSpacingValues, organizeFrames;

  figma.showUI(__html__, {
    width: 400,
    height: 400
  });

  // Load previous spacing values from client storage
  loadSpacingValues = function() {
    return Promise.all([figma.clientStorage.getAsync("horizontalSpacing"), figma.clientStorage.getAsync("verticalSpacing")]).then(function([storedHorizontal, storedVertical]) {
      var horizontalSpacing, verticalSpacing;
      horizontalSpacing = storedHorizontal || 0;
      verticalSpacing = storedVertical || 0;
      return figma.ui.postMessage({
        type: "load-spacing",
        horizontalSpacing,
        verticalSpacing
      });
    }).catch(function(error) {
      return console.error("Error loading spacing values:", error);
    });
  };

  loadSpacingValues();

  // Listen for messages from the UI
  figma.ui.onmessage = function(msg) {
    var horizontalSpacing, verticalSpacing;
    console.log("Message received from UI:", msg);
    if ((msg != null ? msg.type : void 0) === "organize-frames") {
      verticalSpacing = parseFloat(msg != null ? msg.verticalSpacing : void 0) || 0;
      horizontalSpacing = parseFloat(msg != null ? msg.horizontalSpacing : void 0) || 0;
      // Save values asynchronously
      Promise.all([
        figma.clientStorage.setAsync("horizontalSpacing",
        horizontalSpacing).catch(function(error) {
          return console.error("Error saving horizontal spacing:",
        error);
        }),
        figma.clientStorage.setAsync("verticalSpacing",
        verticalSpacing).catch(function(error) {
          return console.error("Error saving vertical spacing:",
        error);
        })
      ]);
      return organizeFrames(verticalSpacing, horizontalSpacing);
    }
  };

  // Function to organize Figma elements
  organizeFrames = function(verticalSpacing, horizontalSpacing) {
    var i, j, k, len, len1, len2, mainComponent, node, ref, ref1, ref2, section, sections, subComponent, subComponents, xOffset, yOffset;
    console.log("Scanning elements on the Figma page...");
    mainComponent = null;
    subComponents = [];
    sections = [];
    ref = figma.currentPage.children;
    // Identify main component, sub-components, and sections
    for (i = 0, len = ref.length; i < len; i++) {
      node = ref[i];
      console.log("Checking:", node.name, "Type:", node.type);
      if (node.type === "COMPONENT" || node.type === "COMPONENT_SET") {
        if (node.name.startsWith(".")) {
          subComponents.push(node); // Store sub-components
        } else if (!mainComponent) {
          mainComponent = node; // Set the first non-prefixed component as main
        }
      }
      if (node.type === "SECTION") {
        sections.push(node); // Store sections
      }
    }
    
    // Move the main component to (0,0)
    if (mainComponent) {
      console.log("Setting main component:", mainComponent.name, "to (0,0)");
      mainComponent.x = 0;
      mainComponent.y = 0;
      // Move sub-components below the main component
      yOffset = mainComponent.y + mainComponent.height + verticalSpacing;
      ref1 = subComponents.sort(function(a, b) {
        return a.name.localeCompare(b.name);
      });
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        subComponent = ref1[j];
        console.log("Moving sub-component:", subComponent.name, "to (0,", yOffset, ")");
        subComponent.x = mainComponent.x; // Keep x aligned with main component
        subComponent.y = yOffset;
        yOffset += subComponent.height + verticalSpacing;
      }
      // Move sections to the right of the main component
      xOffset = mainComponent.x + mainComponent.width + horizontalSpacing;
      ref2 = sections.sort(function(a, b) {
        return a.name.localeCompare(b.name);
      });
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        section = ref2[k];
        console.log("Moving section:", section.name, "to (", xOffset, ",", mainComponent.y, ")");
        section.x = xOffset;
        section.y = mainComponent.y;
        xOffset += section.width + horizontalSpacing;
      }
    } else {
      console.log("No main component found. Sub-components and sections will not be moved.");
    }
    // Refresh the Figma UI
    figma.currentPage.selection = mainComponent ? [mainComponent].concat(subComponents).concat(sections) : subComponents.concat(sections);
    figma.viewport.scrollAndZoomIntoView(figma.currentPage.selection);
    console.log("Reorganization complete!");
    figma.notify("Main, sub-components, and sections arranged!");
    return figma.closePlugin();
  };

}).call(this);
