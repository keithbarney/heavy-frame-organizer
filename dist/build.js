// Generated by CoffeeScript 2.7.0
(function() {
  var build, bundleUI, compileCoffeeScript, concatenateJavaScript, debounce, debouncedBuild, execSync, fileTimestamps, fs, path, watchFiles;

  fs = require("fs-extra");

  ({execSync} = require("child_process"));

  path = require("path");

  debounce = require("lodash.debounce");

  // Store last file modification timestamps
  fileTimestamps = {};

  // Function to compile all CoffeeScript files
  compileCoffeeScript = function() {
    var error;
    try {
      console.log("Compiling CoffeeScript...");
      execSync("coffee -c -o dist/ src/");
      return console.log("CoffeeScript compiled successfully.");
    } catch (error1) {
      error = error1;
      console.error("❌ CoffeeScript compilation failed:", error.message);
      return process.exit(1);
    }
  };

  // Function to bundle UI files
  bundleUI = function() {
    var bundledHtml, css, error, html;
    try {
      console.log("Bundling UI components...");
      execSync("pug src/ui.pug --out dist/");
      console.log("Pug compiled to dist/ui.html");
      execSync("sass src/styles.sass dist/styles.css");
      console.log("SASS compiled to dist/styles.css");
      html = fs.readFileSync("dist/ui.html", "utf8");
      css = fs.readFileSync("dist/styles.css", "utf8");
      bundledHtml = html.replace("</head>", `<style>${css}</style></head>`);
      fs.writeFileSync("dist/ui.html", bundledHtml, "utf8");
      return console.log("Successfully bundled UI into dist/ui.html!");
    } catch (error1) {
      error = error1;
      console.error("❌ UI bundling failed:", error.message);
      return process.exit(1);
    }
  };

  // Function to concatenate JavaScript files
  concatenateJavaScript = function() {
    var concatenatedContent, error, jsFiles;
    try {
      console.log("Concatenating JavaScript files...");
      jsFiles = fs.readdirSync("dist").filter(function(file) {
        return file.endsWith(".js") && file !== "plugin.js";
      });
      concatenatedContent = jsFiles.map(function(file) {
        return fs.readFileSync(path.join("dist", file), "utf8");
      }).join("\n");
      fs.writeFileSync("dist/plugin.js", concatenatedContent, "utf8");
      return console.log("JavaScript files concatenated into dist/plugin.js");
    } catch (error1) {
      error = error1;
      console.error("❌ JavaScript concatenation failed:", error.message);
      return process.exit(1);
    }
  };

  // Function to perform the full build process
  build = function() {
    console.log("Running full build process...");
    compileCoffeeScript();
    bundleUI();
    concatenateJavaScript();
    return console.log("✅ Build complete.");
  };

  // Initial build
  build();

  // Debounced build function to prevent redundant triggers
  debouncedBuild = debounce(build, 500);

  // Function to watch for file changes in the src directory
  watchFiles = function() {
    console.log("Watching for changes in the src directory... Press Ctrl+C to stop.");
    return fs.watch("src", {
      recursive: true
    }, function(eventType, filename) {
      var error, filePath, modifiedTime, stats;
      if (filename) {
        filePath = path.join("src", filename);
        try {
          stats = fs.statSync(filePath);
          modifiedTime = stats.mtimeMs;
          // Prevent unnecessary rebuilds by checking for actual file content modifications
          if (fileTimestamps[filePath] && fileTimestamps[filePath] === modifiedTime) { // Skip rebuild if the file hasn't actually changed
            return;
          }
          fileTimestamps[filePath] = modifiedTime;
          console.log(`Detected changes in ${filename}. Scheduling rebuild...`);
          return debouncedBuild();
        } catch (error1) {
          error = error1;
          return console.error("❌ Error reading file:", error.message);
        }
      }
    });
  };

  watchFiles();

}).call(this);
